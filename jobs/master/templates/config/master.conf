# bind master configuration

# allow only trusted nets/hosts to recurse
acl trusted {
  localhost;
  localnets;
<% p('recursion.allow_from', []).to_a.each do |acl| %>
  <%= acl %>;
<% end %>
};

# sane defaults
options {
  pid-file "/var/vcap/sys/run/master/master.pid";
  directory "/var/vcap/sys/run/master/data";
  version "nope";
<% if p('recursion.forwarders', []).to_a.length > 0 %>
  recursion yes;
  allow-recursion { trusted; };

  forwarders {
<% p('recursion.forwarders', []).to_a.each do |svr| %>
    <%= svr %>;
<% end %>
  };
<% else %>
  recursion no;
  allow-recursion { "none"; };
<% end %>

  notify yes;
  also-notify    { <%= link('slave-dns').instances.collect { |x| x.address } .join('; ') %>; };
  allow-transfer { <%= p('network') %>; };

<% p('bind_options', {}).to_h.each_pair do |key,value| %>
  <%= "#{key} #{value}" %>;
<% end %>
};

<% p('zones', {}).each do |domain, config| %>
zone "<%= domain %>" in {
  type master;
  file "<%= domain %>.db";
  allow-update { <%= p('allow_update').has_key?(domain) ? "key \"#{p('allow_update')[domain]}\"" : "none" %>; };
};
<% end %>

<% p('tsig_keys', {}).each do |key_name, key_secret| %>
key "<%= key_name %>" {
  algorithm hmac-md5;
  secret "<%= key_secret %>";
};
<% end %>

<% p('forward').each do |zone| %>
zone "<%= zone['name'] %>" in {
  type forward;
  forward only;
  forwarders {
    <% (zone['forwarders'] || []).each do |srv| -%>
      <%= srv %>;
    <% end -%>
  };
};
<% end %>

# vim:et:ft=named
